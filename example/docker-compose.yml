services:
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "15672:15672"
      - "5672:5672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    env_file:
      - .env
    tty: true
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 30s
      timeout: 10s
      retries: 3
      start_period:  40s

  postgres:
    image: postgres:latest
    container_name: postgres
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  scannerservice:
    build:
      context: .
      dockerfile: src/services/scanner/Dockerfile
    container_name: scanner
    env_file:
      - .env
    volumes:
      - ./pdf_input:/pdf/invoices:ro
    restart: unless-stopped
    depends_on:
      rabbitmq:
        condition: service_healthy

  accountingservice:
    build:
      context: .
      dockerfile: src/services/accounting/Dockerfile
    container_name: accounting
    env_file:
      - .env
    restart: unless-stopped
    ports:
      - "9000:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy

  archiveservice:
    build:
      context: .
      dockerfile: src/services/archive/Dockerfile
    container_name: archive
    env_file:
      - .env
    restart: unless-stopped
    volumes:
      - ./output:/data/invoices
    depends_on:
      rabbitmq:
        condition: service_healthy

volumes:
  pdf_input:
    driver: local